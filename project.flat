---START-'.:'---
---END-'.:'---
---START-'./public:'---
---END-'./public:'---
---START-'./public/manifest.webmanifest:'---
{
  "name": "Skull King Scorekeeper",
  "short_name": "SkullKing",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#0b132b",
  "theme_color": "#1c2541",
  "icons": [
    { "src": "/icons/icon-192.png", "sizes": "192x192", "type": "image/png" },
    { "src": "/icons/icon-512.png", "sizes": "512x512", "type": "image/png" }
  ]
}---END-'./public/manifest.webmanifest:'---
---START-'./tailwind.config.cjs:'---
module.exports = {
  content: ['./index.html', './src/**/*.{ts,tsx}'],
  theme: {
    extend: {
      colors: {
        bg: '#0b132b',
        surface: '#1c2541',
        accent: '#3a506b',
        text: '#e0e1dd',
        ok: '#3ddc97',
        bad: '#ef476f'
      }
    }
  },
  plugins: []
};---END-'./tailwind.config.cjs:'---
---START-'./.gitignore:'---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
---END-'./.gitignore:'---
---START-'./package.json:'---
{
  "name": "skull-king-pwa",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build && workbox injectManifest",
    "preview": "vite preview",
    "lint": "eslint . --ext .ts,.tsx --max-warnings=0",
    "format": "prettier --write ."
  },
  "dependencies": {
    "clsx": "^2.1.1",
    "dexie": "^4.0.8",
    "nanoid": "^5.0.7",
    "papaparse": "^5.5.3",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.23.1",
    "tailwind": "^4.0.0",
    "xlsx": "^0.18.5",
    "zod": "^3.23.8",
    "zustand": "^4.5.2"
  },
  "devDependencies": {
    "@types/node": "^20.11.30",
    "@types/papaparse": "^5.3.14",
    "@typescript-eslint/eslint-plugin": "^7.6.0",
    "@typescript-eslint/parser": "^7.6.0",
    "@vitejs/plugin-react": "^4.7.0",
    "autoprefixer": "^10.4.17",
    "eslint": "^8.57.0",
    "postcss": "^8.4.35",
    "prettier": "^3.2.5",
    "tailwindcss": "^3.4.3",
    "typescript": "^5.9.2",
    "vite": "^7.0.6",
    "vite-plugin-pwa": "^0.20.0",
    "workbox-build": "^7.0.0",
    "workbox-window": "^7.0.0"
  }
}---END-'./package.json:'---
---START-'./vite.config.ts:'---
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { VitePWA } from 'vite-plugin-pwa';

export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      registerType: 'prompt',
      includeAssets: ['favicon.svg'],
      manifest: {
        name: 'Skull King Scorekeeper',
        short_name: 'SkullKing',
        start_url: '/',
        display: 'standalone',
        background_color: '#0b132b',
        theme_color: '#1c2541',
        icons: [
          { src: '/icons/icon-192.png', sizes: '192x192', type: 'image/png' },
          { src: '/icons/icon-512.png', sizes: '512x512', type: 'image/png' }
        ]
      }
    })
  ]
});---END-'./vite.config.ts:'---
---START-'./src:'---
---END-'./src:'---
---START-'./src/score.ts:'---
import { ScoringConfig } from '../config/scoringConfig';

export function calculateScore(
  bid: number,
  tricks: number,
  roundNumber: number,
  bonus: number,
  config: ScoringConfig
): number {
  if (bid === 0) {
    return tricks === 0
      ? config.zeroBidMultiplier * roundNumber + bonus
      : -config.zeroBidFailMultiplier * roundNumber + bonus;
  }
  if (bid === tricks) {
    return bid * config.pointsPerSuccessfulTrick + bonus;
  }
  const diff = Math.abs(bid - tricks);
  return -diff * config.failedBidPenaltyPerTrick + bonus;
}

export function computeBonusFromSpecials(
  specials: Record<string, number | undefined>,
  config: ScoringConfig
): number {
  let sum = 0;
  for (const [key, count] of Object.entries(specials)) {
    const n = count ?? 0;
    const rule = config.specials[key];
    if (!rule) continue;
    if (rule.points) sum += n * rule.points;
  }
  return sum;
}---END-'./src/score.ts:'---
---START-'./src/App.tsx:'---
import { Routes, Route, Navigate } from 'react-router-dom';
import Home from './routes/Home';
import NewGame from './routes/NewGame';
import Bets from './routes/Bets';
import Results from './routes/Results';
import Final from './routes/Final';
import Dashboard from './routes/Dashboard';

export default function App() {
  return (
    <Routes>
      <Route path="/" element={<Home />} />
      <Route path="/new" element={<NewGame />} />
      <Route path="/game/:gameId/round/:roundNumber/bets" element={<Bets />} />
      <Route path="/game/:gameId/round/:roundNumber/results" element={<Results />} />
      <Route path="/game/:gameId/final" element={<Final />} />
      <Route path="/game/:gameId/dashboard" element={<Dashboard />} />
      <Route path="*" element={<Navigate to="/" replace />} />
    </Routes>
  );
}---END-'./src/App.tsx:'---
---START-'./src/main.tsx:'---
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);---END-'./src/main.tsx:'---
---START-'./src/scoringConfig.ts:'---
export interface SpecialRule {
  id: string;
  icon: string;
  label: string;
  points?: number;
}

export interface ScoringConfig {
  pointsPerSuccessfulTrick: number;
  failedBidPenaltyPerTrick: number;
  zeroBidMultiplier: number;
  zeroBidFailMultiplier: number;
  allowHarryAdjustment: boolean;
  specials: Record<string, SpecialRule>;
  // hooks for more detailed rule interactions if later desired
}

export const standardScoring: ScoringConfig = {
  pointsPerSuccessfulTrick: 20,
  failedBidPenaltyPerTrick: 10,
  zeroBidMultiplier: 10,
  zeroBidFailMultiplier: 10,
  allowHarryAdjustment: true,
  specials: {
    skullKing: { id: 'skullKing', icon: 'üíÄüëë', label: 'Skull King' },
    pirates: { id: 'pirates', icon: 'üè¥‚Äç‚ò†Ô∏è', label: 'Pirate' },
    mermaids: { id: 'mermaids', icon: 'üßú‚Äç‚ôÄÔ∏è', label: 'Mermaid' },
    coins: { id: 'coins', icon: 'ü™ô', label: 'Coin', points: 10 }
  }
};

export const presets = {
  standard: standardScoring
};---END-'./src/scoringConfig.ts:'---
---START-'./src/index.css:'---
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  color-scheme: light dark;
}

html,
body,
#root {
  height: 100%;
}

body {
  @apply bg-bg text-text;
  font-synthesis-weight: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}---END-'./src/index.css:'---
---START-'./src/types.ts:'---
export type UUID = string;

export interface Player {
  id: UUID;
  name: string;
  color?: string;
  emoji?: string;
}

export type GameStatus = 'in-progress' | 'completed';

export interface Game {
  id: UUID;
  createdAt: number;
  updatedAt: number;
  status: GameStatus;
  players: Player[];
  totalRounds: number;
  currentRound: number;
  scoringPresetId: string;
  notes?: string;
}

export interface RoundBid {
  playerId: UUID;
  bid: number;
  betAdjustedByHarry?: -1 | 0 | 1;
}

export interface RoundResultPerPlayer {
  tricks: number;
  bonus: number;
  specialCards: {
    skullKing?: number;
    pirates?: number;
    mermaids?: number;
    coins?: number;
    escapes?: number;
  };
  score: number;
}

export interface Round {
  id: UUID;
  gameId: UUID;
  roundNumber: number;
  bids: Record<UUID, RoundBid>;
  results: Record<UUID, RoundResultPerPlayer>;
  locked?: boolean;
}---END-'./src/types.ts:'---
---START-'./src/components:'---
---END-'./src/components:'---
---START-'./src/components/CardCounter.tsx:'---
export default function CardCounter({
  icon,
  label,
  value,
  onChange
}: {
  icon: string;
  label: string;
  value: number;
  onChange: (v: number) => void;
}) {
  return (
    <div className="flex items-center gap-2">
      <button
        className="px-2 py-1 rounded bg-surface hover:bg-accent"
        onClick={() => onChange(Math.max(0, value - 1))}
        aria-label={`remove ${label}`}
      >
        ‚àí
      </button>
      <div className="min-w-[3rem] text-center">{icon} {value}</div>
      <button
        className="px-2 py-1 rounded bg-surface hover:bg-accent"
        onClick={() => onChange(value + 1)}
        aria-label={`add ${label}`}
      >
        +
      </button>
      <span className="opacity-70">{label}</span>
    </div>
  );
}---END-'./src/components/CardCounter.tsx:'---
---START-'./src/components/NumberStepper.tsx:'---
import { clsx } from 'clsx';

export default function NumberStepper({
  value,
  min = 0,
  max = 99,
  onChange
}: {
  value: number;
  min?: number;
  max?: number;
  onChange: (v: number) => void;
}) {
  const dec = () => onChange(Math.max(min, value - 1));
  const inc = () => onChange(Math.min(max, value + 1));
  return (
    <div className="inline-flex items-center gap-2">
      <button className="px-3 py-1 rounded bg-surface hover:bg-accent" onClick={dec} aria-label="decrease">
        ‚àí
      </button>
      <input
        type="number"
        value={value}
        min={min}
        max={max}
        onChange={(e) => onChange(Math.max(min, Math.min(max, Number(e.target.value))))}
        className={clsx(
          'w-16 text-center rounded bg-surface border border-accent focus:outline-none focus:ring-2'
        )}
      />
      <button className="px-3 py-1 rounded bg-surface hover:bg-accent" onClick={inc} aria-label="increase">
        +
      </button>
    </div>
  );
}---END-'./src/components/NumberStepper.tsx:'---
---START-'./src/components/ScoreChip.tsx:'---
export default function ScoreChip({ value }: { value: number }) {
  const color = value >= 0 ? 'bg-green-700' : 'bg-red-700';
  return <span className={`px-3 py-1 rounded ${color}`}>{value}</span>;
}---END-'./src/components/ScoreChip.tsx:'---
---START-'./src/components/Layout.tsx:'---
import { ReactNode } from 'react';
import { Link } from 'react-router-dom';

export default function Layout({ title, children }: { title: string; children: ReactNode }) {
  return (
    <div className="min-h-full flex flex-col">
      <header className="sticky top-0 z-10 bg-surface/90 backdrop-blur px-4 py-3 flex items-center justify-between">
        <Link to="/" className="text-xl font-semibold">Skull King</Link>
        <span className="opacity-70">{title}</span>
      </header>
      <main className="flex-1 p-4">{children}</main>
    </div>
  );
}---END-'./src/components/Layout.tsx:'---
---START-'./src/hooks:'---
---END-'./src/hooks:'---
---START-'./src/hooks/useGame.ts:'---
import { useEffect } from 'react';
import { useStore } from '../store/useStore';

export function useGame(gameId?: string) {
  const { currentGame, rounds, loadGame } = useStore();
  useEffect(() => {
    if (gameId) loadGame(gameId);
  }, [gameId, loadGame]);
  return { game: currentGame, rounds };
}---END-'./src/hooks/useGame.ts:'---
---START-'./src/lib:'---
---END-'./src/lib:'---
---START-'./src/lib/utils.ts:'---
import { nanoid } from 'nanoid';

export const uid = () => nanoid();

export function sum(values: number[]) {
  return values.reduce((a, b) => a + b, 0);
}---END-'./src/lib/utils.ts:'---
---START-'./src/lib/export.ts:'---
import { Game, Round } from '../types';
import Papa from 'papaparse';
import * as XLSX from 'xlsx';

export function exportCSV(game: Game, rounds: Round[]) {
  const rows: any[] = [];
  for (const r of rounds) {
    for (const [playerId, res] of Object.entries(r.results)) {
      const bid = r.bids[playerId]?.bid ?? 0;
      const adj = r.bids[playerId]?.betAdjustedByHarry ?? 0;
      rows.push({
        gameId: game.id,
        round: r.roundNumber,
        playerId,
        bid,
        adjustedBid: bid + adj,
        tricks: res.tricks,
        bonus: res.bonus,
        skullKing: res.specialCards.skullKing ?? 0,
        pirates: res.specialCards.pirates ?? 0,
        mermaids: res.specialCards.mermaids ?? 0,
        coins: res.specialCards.coins ?? 0,
        score: res.score
      });
    }
  }
  const csv = Papa.unparse(rows);
  return new Blob([csv], { type: 'text/csv;charset=utf-8;' });
}

export function exportXLSX(game: Game, rounds: Round[]) {
  const rows: any[] = [];
  for (const r of rounds) {
    for (const [playerId, res] of Object.entries(r.results)) {
      const bid = r.bids[playerId]?.bid ?? 0;
      const adj = r.bids[playerId]?.betAdjustedByHarry ?? 0;
      rows.push({
        Round: r.roundNumber,
        PlayerId: playerId,
        Bid: bid,
        AdjustedBid: bid + adj,
        Tricks: res.tricks,
        Bonus: res.bonus,
        SkullKing: res.specialCards.skullKing ?? 0,
        Pirates: res.specialCards.pirates ?? 0,
        Mermaids: res.specialCards.mermaids ?? 0,
        Coins: res.specialCards.coins ?? 0,
        Score: res.score
      });
    }
  }
  const ws = XLSX.utils.json_to_sheet(rows);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, 'Scores');
  const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
  return new Blob([wbout], {
    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
  });
}---END-'./src/lib/export.ts:'---
---START-'./src/lib/db.ts:'---
import Dexie, { Table } from 'dexie';
import { Game, Round } from '../types';

class SkullDb extends Dexie {
  games!: Table<Game, string>;
  rounds!: Table<Round, string>;

  constructor() {
    super('skull-king-db');
    this.version(1).stores({
      games: 'id, status, updatedAt',
      rounds: 'id, gameId, roundNumber'
    });
  }
}

export const db = new SkullDb();---END-'./src/lib/db.ts:'---
---START-'./src/routes:'---
---END-'./src/routes:'---
---START-'./src/routes/Results.tsx:'---
import { useParams, useNavigate } from 'react-router-dom';
import Layout from '../components/Layout';
import { useGame } from '../hooks/useGame';
import { useMemo, useState } from 'react';
import NumberStepper from '../components/NumberStepper';
import CardCounter from '../components/CardCounter';
import { presets } from '../config/scoringConfig';
import { computeBonusFromSpecials, calculateScore } from '../lib/score';
import { Round } from '../types';
import { uid } from '../lib/utils';
import { useStore } from '../store/useStore';

export default function Results() {
  const { gameId, roundNumber } = useParams();
  const nav = useNavigate();
  const { game, rounds } = useGame(gameId);
  const { upsertRound, setCurrentRound, completeGame } = useStore();
  const rNum = Number(roundNumber);
  const config = presets.standard;

  const round = useMemo<Round | undefined>(() => rounds.find((r) => r.roundNumber === rNum), [rounds, rNum]);

  const [local, setLocal] = useState(() => {
    if (!game) return {};
    const o: any = {};
    for (const p of game.players) {
      const existing = round?.results[p.id];
      const bid = round?.bids[p.id]?.bid ?? 0;
      const adj = round?.bids[p.id]?.betAdjustedByHarry ?? 0;
      o[p.id] = {
        tricks: existing?.tricks ?? 0,
        bonus: existing?.bonus ?? 0,
        harry: adj as -1 | 0 | 1,
        specials: { ...(existing?.specialCards ?? {}) },
        bid
      };
    }
    return o;
  });

  if (!game) return null;
  if (!round) return <Layout title="Erreur">Round introuvable</Layout>;

  const setPlayer = (pid: string, key: string, value: any) =>
    setLocal((s: any) => ({ ...s, [pid]: { ...s[pid], [key]: value } }));

  const saveRound = async () => {
    const updated: Round = { ...round };
    for (const p of game.players) {
      const pid = p.id;
      const entry = (local as any)[pid];
      const specialsBonus = computeBonusFromSpecials(entry.specials, config);
      const adjustedBid = entry.bid + (config.allowHarryAdjustment ? entry.harry ?? 0 : 0);
      const score = calculateScore(adjustedBid, entry.tricks, rNum, entry.bonus + specialsBonus, config);

      updated.bids[pid] = {
        playerId: pid,
        bid: entry.bid,
        betAdjustedByHarry: entry.harry ?? 0
      };
      updated.results[pid] = {
        tricks: entry.tricks,
        bonus: entry.bonus,
        specialCards: entry.specials,
        score
      };
    }
    updated.locked = true;
    await upsertRound(updated);

    if (rNum < game.totalRounds) {
      await setCurrentRound(rNum + 1);
      nav(`/game/${game.id}/round/${rNum + 1}/bets`);
    } else {
      await completeGame(game.id);
      nav(`/game/${game.id}/final`);
    }
  };

  return (
    <Layout title={`R√©sultats manche ${rNum}`}>
      <div className="space-y-6">
        {game.players.map((p) => {
          const entry = (local as any)[p.id];
          const specialsBonus = computeBonusFromSpecials(entry.specials, config);
          const adjustedBid = entry.bid + (config.allowHarryAdjustment ? entry.harry ?? 0 : 0);
          const projected = calculateScore(adjustedBid, entry.tricks, rNum, entry.bonus + specialsBonus, config);

          return (
            <div key={p.id} className="rounded bg-surface p-3 space-y-3">
              <div className="flex items-center justify-between">
                <h4 className="font-semibold">{p.name}</h4>
                <div className="opacity-70">Pari: {entry.bid} {entry.harry ? `(Harry ${entry.harry > 0 ? '+1' : '-1'})` : ''}</div>
              </div>

              <div className="flex items-center justify-between">
                <span>Plis r√©alis√©s</span>
                <NumberStepper value={entry.tricks} min={0} max={rNum} onChange={(v) => setPlayer(p.id, 'tricks', v)} />
              </div>

              <div className="flex items-center justify-between">
                <span>Harry The Giant (ajustement pari)</span>
                <div className="flex items-center gap-2">
                  <button className={`px-3 py-1 rounded ${entry.harry === -1 ? 'bg-accent' : 'bg-surface'}`} onClick={() => setPlayer(p.id, 'harry', -1)}>-1</button>
                  <button className={`px-3 py-1 rounded ${entry.harry === 0 ? 'bg-accent' : 'bg-surface'}`} onClick={() => setPlayer(p.id, 'harry', 0)}>0</button>
                  <button className={`px-3 py-1 rounded ${entry.harry === 1 ? 'bg-accent' : 'bg-surface'}`} onClick={() => setPlayer(p.id, 'harry', 1)}>+1</button>
                </div>
              </div>

              <div className="flex items-center justify-between">
                <span>Bonus (+10 / -10)</span>
                <div className="flex items-center gap-2">
                  <button className="px-3 py-1 rounded bg-surface" onClick={() => setPlayer(p.id, 'bonus', entry.bonus - 10)}>-10</button>
                  <span>{entry.bonus}</span>
                  <button className="px-3 py-1 rounded bg-surface" onClick={() => setPlayer(p.id, 'bonus', entry.bonus + 10)}>+10</button>
                </div>
              </div>

              <div className="space-y-2">
                <CardCounter
                  icon="üíÄüëë"
                  label="Skull King"
                  value={entry.specials.skullKing ?? 0}
                  onChange={(v) =>
                    setPlayer(p.id, 'specials', { ...entry.specials, skullKing: v })
                  }
                />
                <CardCounter
                  icon="üè¥‚Äç‚ò†Ô∏è"
                  label="Pirate"
                  value={entry.specials.pirates ?? 0}
                  onChange={(v) =>
                    setPlayer(p.id, 'specials', { ...entry.specials, pirates: v })
                  }
                />
                <CardCounter
                  icon="üßú‚Äç‚ôÄÔ∏è"
                  label="Sir√®ne"
                  value={entry.specials.mermaids ?? 0}
                  onChange={(v) =>
                    setPlayer(p.id, 'specials', { ...entry.specials, mermaids: v })
                  }
                />
                <CardCounter
                  icon="ü™ô"
                  label="Pi√®ce"
                  value={entry.specials.coins ?? 0}
                  onChange={(v) =>
                    setPlayer(p.id, 'specials', { ...entry.specials, coins: v })
                  }
                />
              </div>

              <div className="flex items-center justify-between pt-2 border-t border-accent/40">
                <span>Score projet√©</span>
                <span className={projected >= 0 ? 'text-green-400' : 'text-red-400'}>{projected}</span>
              </div>
            </div>
          );
        })}

        <div className="flex justify-end">
          <button className="px-4 py-2 rounded bg-accent" onClick={saveRound}>Valider la manche</button>
        </div>
      </div>
    </Layout>
  );
}---END-'./src/routes/Results.tsx:'---
---START-'./src/routes/Final.tsx:'---
import { useParams } from 'react-router-dom';
import Layout from '../components/Layout';
import { useGame } from '../hooks/useGame';
import { exportCSV, exportXLSX } from '../lib/export';

export default function Final() {
  const { gameId } = useParams();
  const { game, rounds } = useGame(gameId);

  if (!game) return null;

  const totals: Record<string, number> = {};
  for (const p of game.players) totals[p.id] = 0;
  for (const r of rounds) {
    for (const [pid, res] of Object.entries(r.results)) totals[pid] += res.score ?? 0;
  }
  const ranking = [...game.players].sort((a, b) => totals[b.id] - totals[a.id]);

  const doCSV = () => {
    const blob = exportCSV(game, rounds);
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `skullking_${game.id}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const doXLSX = () => {
    const blob = exportXLSX(game, rounds);
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `skullking_${game.id}.xlsx`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <Layout title="R√©sultat final">
      <div className="space-y-4">
        <ol className="list-decimal pl-6">
          {ranking.map((p, i) => (
            <li key={p.id} className="mb-1">
              {i + 1}. {p.name} ‚Äî {totals[p.id]} pts
            </li>
          ))}
        </ol>

        <div className="flex gap-2">
          <button className="px-3 py-2 rounded bg-accent" onClick={doCSV}>Exporter CSV</button>
          <button className="px-3 py-2 rounded bg-accent" onClick={doXLSX}>Exporter Excel</button>
        </div>

        <div className="mt-6">
          <h3 className="font-semibold mb-2">Historique</h3>
          <div className="overflow-x-auto">
            <table className="w-full text-left">
              <thead>
                <tr>
                  <th>Manche</th>
                  {game.players.map((p) => (
                    <th key={p.id} className="px-2">{p.name}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {rounds.map((r) => (
                  <tr key={r.id}>
                    <td className="px-2 py-1">{r.roundNumber}</td>
                    {game.players.map((p) => (
                      <td key={p.id} className="px-2 py-1">{r.results[p.id]?.score ?? ''}</td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </Layout>
  );
}---END-'./src/routes/Final.tsx:'---
---START-'./src/routes/Dashboard.tsx:'---
import { useParams, Link } from 'react-router-dom';
import Layout from '../components/Layout';
import { useGame } from '../hooks/useGame';

export default function Dashboard() {
  const { gameId } = useParams();
  const { game, rounds } = useGame(gameId);

  if (!game) return null;

  const totals: Record<string, number> = {};
  for (const p of game.players) totals[p.id] = 0;
  for (const r of rounds) {
    for (const [pid, res] of Object.entries(r.results)) {
      totals[pid] += res.score ?? 0;
    }
  }

  return (
    <Layout title="Tableau de bord">
      <div className="overflow-x-auto">
        <table className="w-full text-left">
          <thead>
            <tr>
              <th>Manche</th>
              {game.players.map((p) => (
                <th key={p.id} className="px-2">{p.name}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {Array.from({ length: game.totalRounds }, (_, i) => i + 1).map((n) => {
              const r = rounds.find((rr) => rr.roundNumber === n);
              return (
                <tr key={n} className={n === game.currentRound ? 'bg-accent/20' : ''}>
                  <td className="px-2 py-1">{n}</td>
                  {game.players.map((p) => (
                    <td key={p.id} className="px-2 py-1">
                      {r?.results[p.id]?.score ?? ''}
                    </td>
                  ))}
                </tr>
              );
            })}
            <tr className="border-t border-accent/40">
              <td className="px-2 py-1 font-semibold">Total</td>
              {game.players.map((p) => (
                <td key={p.id} className="px-2 py-1 font-semibold">
                  {totals[p.id]}
                </td>
              ))}
            </tr>
          </tbody>
        </table>
      </div>
      <div className="mt-4">
        <Link className="px-3 py-2 rounded bg-surface" to={`/game/${game.id}/round/${game.currentRound}/bets`}>
          Retour
        </Link>
      </div>
    </Layout>
  );
}---END-'./src/routes/Dashboard.tsx:'---
---START-'./src/routes/Home.tsx:'---
import { Link, useNavigate } from 'react-router-dom';
import Layout from '../components/Layout';
import { useEffect } from 'react';
import { useStore } from '../store/useStore';

export default function Home() {
  const nav = useNavigate();
  const { games, loadGames, deleteGame } = useStore();

  useEffect(() => {
    loadGames();
  }, [loadGames]);

  return (
    <Layout title="Accueil">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl">Parties</h2>
        <Link to="/new" className="px-3 py-2 rounded bg-accent">Nouvelle partie</Link>
      </div>
      <ul className="space-y-3">
        {games.map((g) => (
          <li key={g.id} className="p-3 rounded bg-surface flex justify-between items-center">
            <div>
              <div className="font-semibold">{g.players.map((p) => p.name).join(' ‚Ä¢ ')}</div>
              <div className="text-sm opacity-70">
                {g.status} ‚Ä¢ Manche {g.currentRound}/{g.totalRounds}
              </div>
            </div>
            <div className="flex gap-2">
              <button
                className="px-3 py-1 rounded bg-accent"
                onClick={() => {
                  if (g.status === 'completed') nav(`/game/${g.id}/final`);
                  else nav(`/game/${g.id}/round/${g.currentRound}/bets`);
                }}
              >
                Charger
              </button>
              <button
                className="px-3 py-1 rounded bg-red-800"
                onClick={() => {
                  if (confirm('Supprimer la partie ?')) deleteGame(g.id);
                }}
              >
                Supprimer
              </button>
            </div>
          </li>
        ))}
      </ul>
    </Layout>
  );
}---END-'./src/routes/Home.tsx:'---
---START-'./src/routes/NewGame.tsx:'---
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Layout from '../components/Layout';
import NumberStepper from '../components/NumberStepper';
import { Player } from '../types';
import { uid } from '../lib/utils';
import { useStore } from '../store/useStore';

export default function NewGame() {
  const nav = useNavigate();
  const { createGame } = useStore();
  const [rounds, setRounds] = useState(10);
  const [players, setPlayers] = useState<Player[]>([
    { id: uid(), name: 'Joueur 1' },
    { id: uid(), name: 'Joueur 2' }
  ]);

  const addPlayer = () => setPlayers((ps) => [...ps, { id: uid(), name: `Joueur ${ps.length + 1}` }]);
  const removePlayer = (id: string) => setPlayers((ps) => ps.filter((p) => p.id !== id));
  const updateName = (id: string, name: string) =>
    setPlayers((ps) => ps.map((p) => (p.id === id ? { ...p, name } : p)));

  const canStart = players.length >= 2 && players.length <= 10 && rounds >= 1;

  const start = async () => {
    const gameId = await createGame({
      players,
      totalRounds: rounds,
      scoringPresetId: 'standard'
    });
    nav(`/game/${gameId}/round/1/bets`);
  };

  return (
    <Layout title="Configuration">
      <div className="space-y-6">
        <section>
          <h3 className="font-semibold mb-2">Manches</h3>
          <NumberStepper value={rounds} min={1} max={20} onChange={setRounds} />
        </section>
        <section>
          <h3 className="font-semibold mb-2">Joueurs</h3>
          <div className="space-y-2">
            {players.map((p, idx) => (
              <div key={p.id} className="flex items-center gap-2">
                <span className="w-6 text-right">{idx + 1}.</span>
                <input
                  className="flex-1 rounded bg-surface px-3 py-2"
                  value={p.name}
                  onChange={(e) => updateName(p.id, e.target.value)}
                />
                {players.length > 2 && (
                  <button className="px-2 py-1 bg-red-800 rounded" onClick={() => removePlayer(p.id)}>
                    Retirer
                  </button>
                )}
              </div>
            ))}
          </div>
          {players.length < 10 && (
            <button className="mt-3 px-3 py-2 rounded bg-accent" onClick={addPlayer}>
              Ajouter un joueur
            </button>
          )}
        </section>
        <button disabled={!canStart} className="px-4 py-2 bg-accent rounded disabled:opacity-50" onClick={start}>
          D√©marrer
        </button>
      </div>
    </Layout>
  );
}---END-'./src/routes/NewGame.tsx:'---
---START-'./src/routes/Bets.tsx:'---
import { useParams, useNavigate, Link } from 'react-router-dom';
import Layout from '../components/Layout';
import { useGame } from '../hooks/useGame';
import NumberStepper from '../components/NumberStepper';
import { useEffect, useMemo, useState } from 'react';
import { Round } from '../types';
import { uid } from '../lib/utils';
import { useStore } from '../store/useStore';

export default function Bets() {
  const { gameId, roundNumber } = useParams();
  const nav = useNavigate();
  const { game, rounds } = useGame(gameId);
  const { upsertRound } = useStore();
  const rNum = Number(roundNumber);

  const round = useMemo<Round | undefined>(() => rounds.find((r) => r.roundNumber === rNum), [rounds, rNum]);
  const [bids, setBids] = useState<Record<string, number>>({});

  useEffect(() => {
    if (round && game) {
      const initial: Record<string, number> = {};
      for (const p of game.players) {
        initial[p.id] = round.bids[p.id]?.bid ?? 0;
      }
      setBids(initial);
    } else if (game) {
      const initial: Record<string, number> = {};
      for (const p of game.players) initial[p.id] = 0;
      setBids(initial);
    }
  }, [round, game]);

  if (!game) return null;

  const maxBid = rNum; // standard: up to round number
  const totalTricks = rNum;

  const saveAndNext = async () => {
    const newRound: Round = round ?? {
      id: uid(),
      gameId: game.id,
      roundNumber: rNum,
      bids: {},
      results: {},
      locked: false
    };
    for (const p of game.players) {
      newRound.bids[p.id] = {
        playerId: p.id,
        bid: Math.max(0, Math.min(maxBid, Math.trunc(bids[p.id] ?? 0))),
        betAdjustedByHarry: newRound.bids[p.id]?.betAdjustedByHarry ?? 0
      };
      newRound.results[p.id] = newRound.results[p.id] ?? {
        tricks: 0,
        bonus: 0,
        specialCards: {},
        score: 0
      };
    }
    await upsertRound(newRound);
    nav(`/game/${game.id}/round/${rNum}/results`);
  };

  const sumBids = Object.values(bids).reduce((a, b) => a + b, 0);

  return (
    <Layout title={`Manche ${rNum}: Paris`}>
      <div className="space-y-4">
        <div className="opacity-80">Plis possibles: {totalTricks}</div>
        <ul className="space-y-3">
          {game.players.map((p) => (
            <li key={p.id} className="p-3 rounded bg-surface flex items-center justify-between">
              <span>{p.name}</span>
              <NumberStepper
                value={bids[p.id] ?? 0}
                min={0}
                max={maxBid}
                onChange={(v) => setBids((b) => ({ ...b, [p.id]: v }))}
              />
            </li>
          ))}
        </ul>
        <div className="flex items-center justify-between">
          <span>Total des paris: {sumBids}</span>
          <div className="flex gap-2">
            <Link className="px-3 py-2 rounded bg-surface" to={`/game/${game.id}/dashboard`}>Tableau</Link>
            <button className="px-4 py-2 rounded bg-accent" onClick={saveAndNext}>Valider</button>
          </div>
        </div>
      </div>
    </Layout>
  );
}---END-'./src/routes/Bets.tsx:'---
---START-'./src/store:'---
---END-'./src/store:'---
---START-'./src/store/useStore.ts:'---
import { create } from 'zustand';
import { db } from '../lib/db';
import { Game, Round, UUID } from '../types';
import { uid } from '../lib/utils';

interface StoreState {
  games: Game[];
  currentGame?: Game;
  rounds: Round[];
  loadGames: () => Promise<void>;
  loadGame: (id: UUID) => Promise<void>;
  createGame: (game: Omit<Game, 'id' | 'createdAt' | 'updatedAt' | 'status' | 'currentRound'>) => Promise<UUID>;
  upsertRound: (r: Round) => Promise<void>;
  completeGame: (id: UUID) => Promise<void>;
  deleteGame: (id: UUID) => Promise<void>;
  setCurrentRound: (n: number) => Promise<void>;
}

export const useStore = create<StoreState>((set, get) => ({
  games: [],
  rounds: [],
  async loadGames() {
    const games = await db.games.orderBy('updatedAt').reverse().toArray();
    set({ games });
  },
  async loadGame(id) {
    const game = await db.games.get(id);
    const rounds = await db.rounds.where('gameId').equals(id).sortBy('roundNumber');
    set({ currentGame: game, rounds });
  },
  async createGame(partial) {
    const id = uid();
    const game: Game = {
      id,
      createdAt: Date.now(),
      updatedAt: Date.now(),
      status: 'in-progress',
      players: partial.players,
      totalRounds: partial.totalRounds,
      currentRound: 1,
      scoringPresetId: partial.scoringPresetId
    };
    await db.games.add(game);
    await get().loadGames();
    return id;
  },
  async upsertRound(r) {
    await db.rounds.put(r);
    await db.games.update(r.gameId, { updatedAt: Date.now() });
    await get().loadGame(r.gameId);
  },
  async completeGame(id) {
    await db.games.update(id, { status: 'completed', updatedAt: Date.now() });
    await get().loadGames();
    await get().loadGame(id);
  },
  async deleteGame(id) {
    await db.transaction('rw', db.games, db.rounds, async () => {
      await db.rounds.where('gameId').equals(id).delete();
      await db.games.delete(id);
    });
    await get().loadGames();
  },
  async setCurrentRound(n) {
    const g = get().currentGame;
    if (!g) return;
    await db.games.update(g.id, { currentRound: n, updatedAt: Date.now() });
    await get().loadGame(g.id);
  }
}));---END-'./src/store/useStore.ts:'---
